'scopeName': 'source.gle'
'fileTypes': [
  'gle',
  'icl'
]
'name': 'GLE'
'firstLineMatch': '#!.*\\b(gle)\\b'
# todo: 1. Add TODO grammar
#       2. Make begin/end special
#       3. Maybe change the color for 'keyword_command'
#       4. Code folding
#       5. Parenteses pairing? Maybe not necessary
#       6. Clean garbage
#       7. '\' in string
#       8. Variable highlight in subroutine definition line.
#       9. Add `d1`
#       10. Add some missing operators
#       11. 'box', 'start', 'end'
'patterns': [
  {
    'include': '#line_comment'
  }
  {
    'include': '#action'
  }
  {
    'include': '#builtin_functions'
  }
  {
    'include': '#function_definition'
  }
  {
    'include': '#variable_language'
  }
  {
    'include': '#constant_language'
  }
  {
    'include': '#keyword_control'
  }
  {
    'include': '#keyword_control2'
  }
  {
    'include': '#keyword_command'
  }
  {
    'include': '#keyword_option'
  }
  {
    'include': '#keyword_blockname'
  }
  {
    'include': '#operator'
  }
  {
    'include': '#regexp'
  }
  {
    'include': '#string'
  }
  {
    'include': '#numeric'
  }
  {
    'include': '#variable'
  }
  {
    'match': '\\b(&&|\\|\\|)\\b'
    'name': 'keyword.operator.gle'
  }
  {
    'match': "[=|:]"
    'name': 'punctuation.separator'
  }
]
'repository':
  'line_comment':
    'begin': '(^[ \\t]+)?(?=!)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.gle'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '!'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.gle'
        'end': '\\n'
        'name': 'comment.line.number-sign.gle'
      }
    ]
  'action':
    {
      'name': 'entity.name.action.gle'
      'begin': '^(BEGIN|END|/.+/)\\s*(\{)|^(\{)'
      'beginCaptures':
        '1':
          'name': 'keyword.control.gle'
          'patterns': [
            {
              'include': '#regexp'
            }
          ]
        '2':
          'name': 'entity.name.action.begin.gle'
        '3':
          'name': 'entity.name.action.begin.gle'
      'end': '\}'
      'endCaptures':
        '0':
          'name': 'entity.name.action.end.gle'
      'patterns': [
        {
          'include': '$self'
        }
      ]
    }
  'builtin_functions':
    'patterns': [
      {  # `\expr` is not working
        'match': '\\b(abs|acos|acosh|acot|acoth|acsc|acsch|arg|arg\\$|asec|asech|asin|asinh|atan|atanh|atn|cos|cosh|cot|coth|csc|csch|dataxvalue|datayvalue|date\\$|device\\$|eval|exp|\\\expr|file\\$|fix|format\\$|getenv|height|int|left|len|log|log10|nargs|ndata|ndatasets|not|num1\\$|num\\$|pageheight|pagewidth|path\\$|point[xy]|pos|pt[xy]|rgb|rgba|rgb255|rgba255|right\\$|rnd|sdiv|sec|sech|seg\\$|sgn|sin|sinh|sqr|sqrt|tan|tanh|tdepth|theight|time\\$|todeg|torad|twidth|val|width|xbar|[xy]end|[xy]g|[xy]g3d|[xy]pos|xy2angle)(?=\\()'
        'name': 'support.function.builtin.gle'
      }
    ]
  'keyword_control':
    'patterns': [
      {
        'match': '\\b(begin|bigfile|data|define|else|if|include|for|fullsize|let|next|postscript|return|set|to|then|while)\\b'
        'name': 'keyword.control.gle'
      }
    ]
  'keyword_control2':  # more strict for some control keywords, because they are keywords for other purposes too.
    'patterns': [
      {
        'match': '^\\s*\\b(both|end|start)\\b'
        'name': 'keyword.control.gle'
      }
    ]
  'keyword_command':
    'patterns': [
      {
        'match':'\\b(aline|rline|line|amove|rmove|arc|arcto|bezier|box|circle|closepath|curve|ellipse|ellipse_arc|ellipse_narc|grestore|gsave|join|rbezier|reverse|save|text|write|bar|size|title|xaxis|yaxis|x2axis|y2axis|hscale|vscale|xlabels|ylabels|x2labels|y2labels|xnames|ynames|x2names|y2names|xplaces|yplaces|x2places|y2places|xside|yside|x2side|y2side|xticks|yticks|xsubticks|ysubticks|x2subticks|y2subticks|xtitle|ytitle|x2title|y2title)\\b'
        'name': 'support.class.gle'
      }
    ]
  'keyword_option':
    'patterns': [
      {
        'match':'\\s(width|err|herr|errwidth|herrwidth|errup|herrup|errdown|herrdown|hei|color|dashlen|font|fontlwidth|just|add|nobox|name|arrow|stroke|fill|justify|cap|lstyle|lwidth|from|dist|key|xmin|ymin|xmax|ymax|nomiss|smooth|smoothm|dsubticks|dpoints|nticks|dticks|font|shift|step|offset|position|marker|msize|mscale|ignore|alabeldist|alabelscale|arrowangle|arrowsize|arrowstyle|atitledist|atitlescale|background|cap|pattern|texscale|titlescale|ticksscale)\\s'
        'name': 'variable.parameter.function.gle'
      }
    ]
  'keyword_blockname':
    'patterns': [
      {
        'match':'\\s\\b(box|clip|origin|path|marker|rotate|scale|table|text|translate)\\b'
        'name': 'support.function.section.gle'
      }
    ]
  'regexp':
    'patterns': [
      {
        'name': 'string.regexp.gle'
        'match': '(/)(.*?)(/)'
        'captures':
          '1':
            'name': 'string.regexp.begin.gle'
          '2':
            'patterns': [
              {
                'include': '#regexp_specialcharacters'
              }
              {
                'include': '#numeric'
              }
              {
                'include': '#character_classes'
              }
              {
                'match': '(\\\\.)'
                'name': 'constant.character.escape.gle'
              }
            ]
          '3':
            'name': 'string.regexp.end.gle'
      }
    ]
  'variable_language':
    'patterns': [
      {
        'match': '\\b(BINMODE|CONVFMT|FIELDWIDTHS|FPAT|FS|IGNORECASE|LINT|OFMT|OFS|ORS|PREC|ROUNDMODE|RS|SUBSEP|TEXTDOMAIN)\\b'
        'name': 'variable.language.gle'
      }
      {
        'match': '\\$[0-9]+'
        'name': 'constant.language.gle'
      }
    ]
  'function_definition':
    'patterns': [
      {
        'begin': '^(sub)\\s+([[:alnum:]]+)(\\s+[[:alnum:]]+)*?'
        'beginCaptures':
          '1':
            'name': 'storage.type.function.gle'
          '2':
            'name': 'entity.name.function.gle'
          '3':
            'name': 'variable.parameter.gle'
        'end': 'end sub'
        'endCaptures':
          '0':
            'name': 'storage.type.function.gle'
        'name': 'meta.function.gle'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
    ]
  'operator':
    'patterns': [
      {
        'comment': 'keyword operators that evaluate to True or False'
        'match': '\\b(and|or)\\b'
        'name': 'keyword.operator.logical.gle'
      }
      {
        'match': '<\\=|>\\=|\\=\\=|<|>|\\!\\='
        'name': 'keyword.operator.comparison.gle'
      }
      {
        'match': '\\+\\=|-\\=|\\*\\=|/\\=|//\\=|%\\=|&\\=|\\|\\=|\\^\\=|>>\\=|<<\\=|\\*\\*\\='
        'name': 'keyword.operator.assignment.augmented.gle'
      }
      {
        'match': '\\+|\\-|\\*|\\*\\*|/|//|%|<<|>>|&|\\||\\^|~'
        'name': 'keyword.operator.arithmetic.gle'
      }
      {
        'match': '\\='
        'name': 'keyword.operator.assignment.gle'
      }
    ]
  'constant_language':
    'patterns': [
      {
        'match': "\\b(butt|round|square|mitre|bevel|left|center|right|[tcblr]{2}|on|off|grid|log|nofirst|nolast)\\b"
        'name': 'constant.language.gle'
      }
    ]
  'variable':
    'patterns': [
      {
        'name': 'variable.other.gle'
        'match': '[[:alnum:]_]+\\[(.+?)\\]{1,}'
        'captures':
          '1':
            'patterns': [
              {
                'include': '#numeric'
              }
              {
                'include': '#variable_language'
              }
            ]
      }
    ]
  'numeric':
    'patterns': [
      {
        'match': '\\b([[:digit:]]+)(\.[[:digit:]]+)*'
        'name': 'constant.numeric.gle'
      }
    ]
  'string':
    'patterns': [
      {
        # 'begin': '"'
        # 'end': '"'
        'match': '".*"'
        'name': 'string.quoted.double.gle'
        # 'patterns': [
        #   {
        #     'match': '\\\\.'
        #     'name': 'constant.character.escape.gle'
        #   }
        # ]
      }
      {
        # 'begin': '\''
        # 'end': '\''
        'match': '\'.*\''
        'name': 'string.quoted.single.gle'
        # 'patterns': [
        #   {
        #     'match': '\\\\.'
        #     'name': 'constant.character.escape.gle'
        #   }
        # ]
      }
    ]
  'regexp_specialcharacters':
    'patterns': [
      {
        'name': 'keyword.other.gle'
        'match': '\\^|\\.|\\+|\\*|\\?|\\$|\\\\[abfnrtv]|\\\\"'
      }
      {
        'name': 'keyword.other.gle'
        'begin': '(\\[|\\{)'
        'beginCaptures':
          '1':
            'name': 'punctuation.keyword.other.begin.gle'
        'end': '(\\]|\\})'
        'endCaptures':
          '1':
            'name': 'punctuation.keyword.other.end.gle'
        'patterns': [
          {
            'include': '#character_classes'
          }
          {
            'include': '#numeric'
          }
        ]
      }
      {
        'name': 'constant.numeric.gle'
        'match': '\\\\[[:digit:]]{1,3}|\\\\x[0-9a-fA-F]{2}'
      }
    ]
  'character_classes':
    'patterns': [
      {
        'match': '\\[:(alnum|alpha|blank|cntrl|digit|graph|lower|print|punct|space|upper|xdigit):\\]'
        'name': 'support.class.gle'
      }
      {
        'match': '(\\\\[BsSwWy<>\'`])'
        'name': 'support.class.other.gle'
      }
    ]
  'debug_output':
    'patterns': [
      {
        'name': 'meta.debug.gle'
        'match': '(printf*)\\s+"(\\[DE*BU*G])(.*?)"(,\\s*)*(".*")*(,\s*)*(.+)*$'
        'captures':
          '1':
            'name': 'support.function.builtin.gle'
          '2':
            'name': 'meta.keyword.other.gle'
          '3':
            'name': 'markup.raw.gle'
          '5':
            'name': 'variable.other.gle'
          '7':
            'name': 'variable.other.gle'
      }
   ]
